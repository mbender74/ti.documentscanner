/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Titanium SDK
 * Copyright TiDev, Inc. 04/07/2022-Present
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.documentscanner;

import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;

import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollEventCallback;
import org.appcelerator.kroll.KrollObject;
import org.appcelerator.titanium.TiC;

import org.appcelerator.titanium.TiApplication;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;
import android.view.LayoutInflater;
import android.content.res.Resources;
import androidx.constraintlayout.widget.ConstraintLayout;
import ti.documentscanner.DocumentScanner;
import ti.documentscanner.utils.ImageUtil;
import ti.documentscanner.constants.ResponseType;
import org.appcelerator.titanium.view.TiCompositeLayout;
import org.appcelerator.titanium.view.TiCompositeLayout.LayoutArrangement;

import java.util.HashMap;
import java.util.List;
import android.os.Bundle;
import android.content.Intent;
import android.content.Context;
import java.lang.Runnable;
import android.os.Handler;
import android.os.Looper;

import android.app.Activity;
import android.view.View;
import org.appcelerator.titanium.view.TiUIView;
import androidx.core.app.ActivityCompat;
import androidx.appcompat.app.AppCompatActivity;
import org.appcelerator.titanium.util.TiActivityResultHandler;
import org.appcelerator.titanium.util.TiActivitySupport;
import org.appcelerator.titanium.util.TiIntentWrapper;
import org.appcelerator.titanium.proxy.TiViewProxy;



@Kroll.module(name="TiDocumentscanner", id="ti.documentscanner")
public class TiDocumentscannerModule extends KrollModule implements TiActivityResultHandler
{

	// Standard Debugging variables
	private static final String LCAT = "TiDocumentscannerModule";
	private static final boolean DBG = TiConfig.LOGD;
	private Activity activity;
	private static TiDocumentscannerModule _instance;
	private DocumentScanner documentScanner;
	private TiActivityResultHandler resultHanlder;

	// You can define constants with @Kroll.constant, for example:
	// @Kroll.constant public static final String EXTERNAL_NAME = value;

	public TiDocumentscannerModule()
	{
		super();
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app)
	{
		//Log.d(LCAT, "inside onAppCreate");
		// put module init code that needs to run when the application is created

	}

	public static TiDocumentscannerModule getInstance()
	{

		return _instance;
	}

// 	public View overlayView() {

// 		// packageName = activity.getPackageName();
// 		// resources = activity.getResources();
// 		// resId_viewHolder = resources.getIdentifier("activity_image_crop", "layout", packageName);
// 	 //    LayoutInflater inflater = LayoutInflater.from(activity);
//   //   	viewWrapper = inflater.inflate(resId_viewHolder, null);


//   //       LayoutArrangement arrangement = LayoutArrangement.DEFAULT;
// 		// viewContainer = new TiCompositeLayout(activity, arrangement);
// 		// viewContainer.addView(viewWrapper);


// // 		if (overlayViewProxy != null){

// // 			//overlayViewProxy.setBubbleParent(false);
// // 			overlayViewProxy.setPropertyAndFire(TiC.PROPERTY_BUBBLE_PARENT, "false");
// // 			overlayViewProxy.setPropertyAndFire(TiC.PROPERTY_TOUCH_ENABLED, "false");


// // 			TiUIView tiView = overlayViewProxy.getOrCreateView();
// // 			overlayView = tiView.getNativeView();
// // 			if (overlayView != null){
// // 				parent = (ViewGroup) overlayView.getParent();

// // 				if (parent != null) {
// // 					parent.addView(viewWrapper);
// // //					parent.removeView(overlayView);
// // 				}
// // 				//viewWrapper.addView(overlayView,tiView.getLayoutParams());
// // 				// overlayView.setClickable(false);
// // 			}
// // 		}


// 		return viewContainer;
// 	}



	// public ConstraintLayout wrapperView() {

	// 	packageName = activity.getPackageName();
	// 	resources = activity.getResources();
	// 	resId_viewHolder = resources.getIdentifier("activity_image_crop", "layout", packageName);
	//     LayoutInflater inflater = LayoutInflater.from(activity);
 //    	viewWrapper = inflater.inflate(resId_viewHolder, null);
	// 	return viewWrapper;
	// }


	// public View findView(String viewName) {
	// 	return viewWrapper.findViewById(resources.getIdentifier(viewName, "id", packageName));
	// }








	@SuppressWarnings("rawtypes")
	@Kroll.method
	public void showScanner() {

		if (_instance == null){
			_instance = this;
		}

		activity = TiApplication.getAppCurrentActivity();
        AppCompatActivity compActivity = (AppCompatActivity)activity;


		documentScanner = new DocumentScanner(
            compActivity,
	        (croppedImageResults) -> {
	            // display the first cropped image
	            // croppedImageView.setImageBitmap(
	            //     ImageUtil().readBitmapFromFileUriString(
	            //         croppedImageResults.first(),
	            //         getContentResolver()
	            //     )
	            // );

				//Log.e(LCAT, "++++++++++++++++  croppedImageResults: ");


	           	KrollDict kd = new KrollDict();
	            Object[] ob = croppedImageResults.toArray();
				kd.put("imageCount", croppedImageResults.size());
	            kd.put("images", ob);
				fireEvent("success", kd);


				// final Handler handler = new Handler(Looper.getMainLooper());
				// handler.postDelayed(new Runnable() {
				//     @Override
				//     public void run() {
				//     	activity.runOnUiThread(new Runnable() {
				//             @Override
				//             public void run() {
				//             }
				//         });
				//     }
				// }, 100);


				// HashMap<Integer, KrollEventCallback> listeners = this.eventListeners.get("success");
				// if (listeners != null) {
				// 	Integer[] clonedKeys = listeners.keySet().toArray(new Integer[0]);
				// 	if (clonedKeys != null) {
				// 		for (Integer listenerId : clonedKeys) {
				// 				removeEventListener("success",(int)listenerId);
				// 		}
				// 	}
				// }


	            return null;
	        },
	        (errorMessage) -> {
	            // an error happened
	           // Log.v(LCAT, "documentscannerlogs", errorMessage);
	           	KrollDict kd = new KrollDict();
		        kd.put("errorMessage", errorMessage);
	            fireEvent("error", kd);


				// HashMap<Integer, KrollEventCallback> listeners = this.eventListeners.get("error");
				// if (listeners != null) {
				// 	Integer[] clonedKeys = listeners.keySet().toArray(new Integer[0]);
				// 	if (clonedKeys != null) {
				// 		for (Integer listenerId : clonedKeys) {
				// 				removeEventListener("error",(int)listenerId);
				// 		}
				// 	}
				// }


	            return null;
	        },
	        () -> {
	            // user canceled document scan
	           // Log.v(LCAT, "documentscannerlogs", "User canceled document scan");
	            KrollDict kd = new KrollDict();
		        kd.put("cancel", true);
	            fireEvent("cancel", kd);


				// HashMap<Integer, KrollEventCallback> listeners = this.eventListeners.get("cancel");
				// if (listeners != null) {
				// 	Integer[] clonedKeys = listeners.keySet().toArray(new Integer[0]);
				// 	if (clonedKeys != null) {
				// 		for (Integer listenerId : clonedKeys) {
				// 				removeEventListener("cancel",(int)listenerId);
				// 		}
				// 	}
				// }


	            return null;
	        },
	        ResponseType.BASE64,
	        null,
	        null,
	        null
	    );

        Intent intent = documentScanner.createDocumentScanIntent();

        Context context = (Context)activity;

		TiActivitySupport activitySupport = (TiActivitySupport) context;
		final int resultCode = activitySupport.getUniqueResultCode();

		resultHanlder = this;


		final Handler handler = new Handler(Looper.getMainLooper());
		handler.postDelayed(new Runnable() {
		    @Override
		    public void run() {
		    	activity.runOnUiThread(new Runnable() {
		            @Override
		            public void run() {
						activitySupport.launchActivityForResult(intent, resultCode, resultHanlder);
		            }
		        });
		    }
		}, 10);


	}

	@Override
	public void onError(Activity activity, int requestCode, Exception e)
	{
		//Log.e(LCAT, "++++++++++++++++  onError");
			KrollDict kd = new KrollDict();
	        kd.put("message", e);
	        //fireCallback(kd);
	      	fireEvent("error", kd);
			// HashMap<Integer, KrollEventCallback> listeners = this.eventListeners.get("error");
			// if (listeners != null) {
			// 	Integer[] clonedKeys = listeners.keySet().toArray(new Integer[0]);
			// 	if (clonedKeys != null) {
			// 		for (Integer listenerId : clonedKeys) {
			// 				removeEventListener("error",(int)listenerId);
			// 		}
			// 	}
			// }

	}


	@Override
	public void onResult(Activity activity, int requestCode, int resultCode, Intent data)
	{

		//Log.e(LCAT, "++++++++++++++++  onResult: " + data);

		if (resultCode == Activity.RESULT_OK) {
			if (data != null){
						//Log.e(LCAT, "++++++++++++++++  data != null: ");

				documentScanner.handleDocumentScanIntentResult(data,resultCode);			
			}
			return;
		}
		else if (resultCode != Activity.RESULT_OK && resultCode != Activity.RESULT_CANCELED) {
			return;
		} else if (resultCode == Activity.RESULT_CANCELED) {
			KrollDict kd = new KrollDict();
	        kd.put("cancel", true);
	        //fireCallback(kd);
	      	fireEvent("cancel", kd);


			// HashMap<Integer, KrollEventCallback> listeners = this.eventListeners.get("cancel");
			// if (listeners != null) {
			// 	Integer[] clonedKeys = listeners.keySet().toArray(new Integer[0]);
			// 	if (clonedKeys != null) {
			// 		for (Integer listenerId : clonedKeys) {
			// 				removeEventListener("cancel",(int)listenerId);
			// 		}
			// 	}
			// }


			return;
		}
	}


}



